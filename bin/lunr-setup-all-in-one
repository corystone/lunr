#!/bin/bash
# Copyright (c) 2011-2016 Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -x

USE_VIRTUAL_ENV='yes'

# These get messed with based on virtualenv above
LUNR_BINDIR='/usr/local/bin'
PYTHON_CMD=$(which python)

WORKING_DIR=$(cd $(dirname "$0") && pwd)

# Install system packages
sudo apt-get install lvm2 iscsitarget open-iscsi python-pip\
    cgroup-bin screen curl qemu-utils blktap-utils\
    python-dev libmysqlclient-dev libffi-dev libssl-dev --yes --force-yes


DISTRO=$(lsb_release -c -s)
if [[ ${DISTRO} =~ (oneiric|precise) ]]; then
    sudo apt-get install iscsitarget-dkms --yes --force-yes
fi

ISCSI="/etc/default/iscsitarget"
if [ ! -f $ISCSI ]; then
    echo "$ISCSI missing; iscsitarget package is not installed?"
    exit 1
fi

sudo sed -i "s/false/true/" $ISCSI
sudo service iscsitarget start

# Lunr
if [[ $USE_VIRTUAL_ENV = 'yes' ]]; then
  if ! cd /opt/lunrvenv ; then
    sudo mkdir -p /opt/lunrvenv
    sudo chown -R $USER:$USER /opt/lunrvenv
  fi

  pip install --upgrade virtualenv


  if ! cd /opt/lunrvenv/lunr ; then
    virtualenv /opt/lunrvenv/lunr
  fi
  source /opt/lunrvenv/lunr/bin/activate

  LUNR_BINDIR=/opt/lunrvenv/lunr/bin
  PYTHON_CMD=$LUNR_BINDIR/python
fi

cd $WORKING_DIR/..

pip install --upgrade -r $WORKING_DIR/../requirements.txt
pip install MySQL-python

python setup.py develop

# set working directory to lunr src root
cd $WORKING_DIR/..

# Create and own /etc/lunr
sudo mkdir /etc/lunr
sudo chown -R $USER:$USER /etc/lunr/

# Copy samples configs to /etc/lunr
for c in etc/*.conf-sample ; do
    cp $c /etc/lunr
done
rename "s/-sample//" /etc/lunr/*-sample

# cgroups config
sed -i "s/lunr/$USER/" /etc/lunr/cgconfig.conf
sudo mv /etc/lunr/cgconfig.conf /etc/cgconfig.conf
sudo service cgconfig restart

# Copy sample screenrc
cp etc/lunr.screenrc-sample /etc/lunr/lunr.screenrc

# Is this not needed unless running processes as root?
export LUNR_CONFIG=/etc/lunr/lunr.conf
# Set our current user to the lunr user
sed -i "s/^#\s*user\s*=\s*lunr/user = $USER/" $LUNR_CONFIG

# Setup device for storage server
sudo $PYTHON_CMD ./bin/lunr-setup-storage --user=$USER

if [ $? -ne 0 ]; then
    echo "-- lunr-setup-storage failed, re-run with"
    echo "-- 'sudo $(pwd)/bin/lunr-setup-storage --user=$USER' when ready"
    exit 1
fi

# setup db
$LUNR_BINDIR/lunr-manage version_control
$LUNR_BINDIR/lunr-manage upgrade

# add vtype
echo 'adding default volume type (vtype)'
./bin/lunr-screen -dm > /dev/null
for i in {1..10}; do
    curl http://localhost:8081/status &> /dev/null
    if [ $? -eq 0 ]; then
        break
    fi
    sleep 1
done
$LUNR_BINDIR/lunr-admin type create vtype
screen -S lunr -X quit

# deploy node
echo 'deploying storage node'
./bin/lunr-screen -dm > /dev/null
for i in {1..10}; do
    curl http://localhost:8081/status &> /dev/null
    if [ $? -eq 0 ]; then
        break
    fi
    sleep 1
done
$LUNR_BINDIR/lunr-admin node deploy -a
screen -S lunr -X quit

echo "== Setup is complete =="
echo "You can start lunr services under a screen session "
echo "by typing 'lunr-screen'"

exit 0
